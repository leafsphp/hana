---
/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  { label: 'Docs', href: 'https://docs.hana.leafphp.dev/' },
  { label: 'Community', href: 'https://discord.gg/Pkrm9NJPE3' },
  { label: 'Support Leaf ðŸ’š', href: 'https://leafphp.dev/support/' },
];
---

<header>
  <nav>
    <div class="menu-header">
      <div class="logos-wrapper">
        <img
          src="https://docs.hana.leafphp.dev/logo/hanabira-by-leaf-white.png"
          alt="Hana JS"
          width={200}
        />
      </div>
      <menu-button>
        <template>
          <button class="menu-button" aria-expanded="false">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="32"
              height="32"
              viewBox="0 0 24 24"
              fill="none"
              ><path
                d="M3 7h18M3 12h18M3 17h18"
                stroke="#5e79c7"
                stroke-width="1.5"
                stroke-linecap="round"></path></svg
            >
          </button>
        </template>
      </menu-button>
    </div>
    <noscript>
      <ul class="nav-items">
        {
          textLinks.map(({ label, href }) => (
            <li>
              <a
                aria-current={Astro.url.pathname === href}
                class:list={[
                  'link',
                  {
                    active:
                      Astro.url.pathname === href ||
                      (href !== '/' && Astro.url.pathname.startsWith(href)),
                  },
                ]}
                href={href}
              >
                {label}
              </a>
            </li>
          ))
        }
      </ul>
    </noscript>
    <div id="menu-content" hidden>
      <ul class="nav-items">
        {
          textLinks.map(({ label, href }) => (
            <li>
              <a
                aria-current={Astro.url.pathname === href}
                class:list={[
                  'link',
                  {
                    active:
                      Astro.url.pathname === href ||
                      (href !== '/' && Astro.url.pathname.startsWith(href)),
                  },
                ]}
                href={href}
                target={!href.includes('docs.hana') ? '_blank' : '_self'}
              >
                {label}
              </a>
            </li>
          ))
        }
      </ul>
      <!-- <div class="menu-footer">
    			<div class="socials">
    				{
    					iconLinks.map(({ href, icon, label }) => (
    						<a href={href} class="social">
    							<span class="sr-only">{label}</span>
    							<Icon icon={icon} />
    						</a>
    					))
    				}
    			</div>

    			<div class="theme-toggle">
    				<ThemeToggle />
    			</div>
    		</div> -->
    </div>
  </nav>
</header>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super();

      // Inject menu toggle button when JS runs.
      this.appendChild(this.querySelector('template')!.content.cloneNode(true));
      const btn = this.querySelector('button')!;

      // Hide menu (shown by default to support no-JS browsers).
      const menu = document.getElementById('menu-content')!;
      menu.hidden = true;
      // Add "menu-content" class in JS to avoid covering content in non-JS browsers.
      menu.classList.add('menu-content');

      /** Set whether the menu is currently expanded or collapsed. */
      const setExpanded = (expand: boolean) => {
        btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
        menu.hidden = !expand;
      };

      // Toggle menu visibility when the menu button is clicked.
      btn.addEventListener('click', () => setExpanded(menu.hidden));

      // Hide menu button for large screens.
      const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
        setExpanded(e.matches);
        btn.hidden = e.matches;
      };
      const mediaQueries = window.matchMedia('(min-width: 50em)');
      handleViewports(mediaQueries);
      mediaQueries.addEventListener('change', handleViewports);
    }
  }
  customElements.define('menu-button', MenuButton);
</script>

<style>
  nav {
    display: flex;
    justify-content: space-between;
    z-index: 9999;
    position: relative;
    padding-block: 30px;
  }
  .logos-wrapper {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .menu-header {
    display: flex;
    justify-content: space-between;
    gap: 0.5rem;
    width: 100%;
  }

  .site-title {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    line-height: 1.1;
    color: var(--gray-0);
    text-decoration: none;
  }

  .menu-button {
    position: relative;
    display: flex;
    border-radius: 999rem;
    padding: 0.5rem;
    border: none;
    background: unset;
    z-index: 9;
  }

  .menu-button[aria-expanded='true'] {
  }

  .menu-button[hidden] {
    display: none;
  }

  .menu-button::before {
    position: absolute;
    inset: -1px;
    content: '';
    border: none;
    z-index: -1;
  }

  .menu-content {
    position: absolute;
    left: 0;
    right: 0;
    background-color: var(--bg-primary);
  }

  .nav-items {
    margin: 0;
    display: flex;
    flex-direction: column;
    font-size: 14px;
    line-height: 1.2;
    list-style: none;
    gap: 20px 0px;
    padding-top: 20px;
  }

  .link {
    display: inline-block;
    text-decoration: none;
  }

  .link.active {
    color: var(--gray-0);
  }

  .menu-footer {
    display: flex;
    justify-content: space-between;
    gap: 0.75rem;
    padding: 1.5rem 2rem 1.5rem 1.5rem;
    background-color: var(--gray-999);
    border-radius: 0 0 0.75rem 0.75rem;
    box-shadow: var(--shadow-lg);
  }

  .theme-toggle {
    display: flex;
    align-items: center;
    height: calc(var(--icon-size) + 2 * var(--icon-padding));
  }

  @media (min-width: 50em) {
    nav {
      display: grid;
      grid-template-columns: 1fr auto;
      align-items: center;
      gap: 1rem;
    }

    .menu-header {
      padding: 0;
    }

    .site-title {
      font-size: 16px;
    }

    .menu-content {
      display: contents;
    }

    .nav-items {
      position: relative;
      flex-direction: row;
      font-size: 16px;
      border: 0;
      padding-top: 0;
    }

    .nav-items::before {
      position: absolute;
      inset: -1px;
      content: '';
      background: var(--gradient-stroke);
      border-radius: 999rem;
      z-index: -1;
    }

    .link {
      padding: 0.5rem 1rem;
      border-radius: 999rem;
      transition:
        color var(--theme-transition),
        background-color var(--theme-transition);
    }

    .link:hover,
    .link:focus {
      color: var(--gray-100);
      background-color: var(--accent-subtle-overlay);
    }

    .link.active {
      color: var(--accent-text-over);
      background-color: var(--accent-regular);
    }

    .menu-footer {
      --icon-padding: 0.375rem;

      justify-self: flex-end;
      align-items: center;
      padding: 0;
      background-color: transparent;
      box-shadow: none;
    }

    .socials {
      display: none;
    }
  }

  @media (min-width: 60em) {
    .socials {
      display: flex;
      justify-content: flex-end;
      gap: 0;
    }
  }
  @media (forced-colors: active) {
    .link.active {
      color: SelectedItem;
    }
  }
</style>
